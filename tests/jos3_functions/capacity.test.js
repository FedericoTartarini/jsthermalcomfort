import { capacity } from "../../src/jos3_functions/capacity";
import JOS3Defaults from "../../src/jos3_functions/JOS3Defaults";
import { describe, it, expect } from "@jest/globals";

describe("capacity", () => {
  it("should use appropriate defaults", () => {
    const withDefaults = capacity();
    const withoutDefaults = capacity(
      JOS3Defaults.height,
      JOS3Defaults.weight,
      JOS3Defaults.bsa_equation,
      JOS3Defaults.age,
      JOS3Defaults.cardiac_index,
    );

    expect(withoutDefaults).toEqual(withDefaults);
  });

  it.each([
    {
      height: JOS3Defaults.height,
      weight: JOS3Defaults.weight,
      bsa_equation: "dubois",
      age: JOS3Defaults.age,
      ci: JOS3Defaults.cardiac_index,
      expected: [
        7.2072686889342312e3, 3.4612195804786694e2, 1.1573452972225552e3,
        6.2024400000000005e3, 1.098e3, 7.3080000000000007e2,
        6.7860000000000002e2, 9.0135926574965367e1, 3.0646215035488223e2,
        2.0303999999999999e3, 2.0880000000000001e2, 4.3265244755983372e2,
        1.5287053147114125e3, 3.7071e4, 1.5875999999999999e3,
        4.0020351399284618e2, 1.4061204545694595e3, 3.3816599999999999e4,
        1.4616000000000001e3, 9.5544082169463286e2, 2.9997236364148471e3,
        1.6156800000000001e4, 2.6672399999999998e4, 7.0091999999999998e3,
        2.0016000000000001e3, 6.7061129371774229e1, 1.6585010489793626e2,
        9.0135926574965367e1, 6.1178400000000001e3, 4.5360000000000002e2,
        3.2809477273287392e1, 8.6530489511966735e1, 5.4081555944979215e1,
        4.0352400000000002e3, 3.0240000000000003e2, 1.5863923077193906e1,
        3.6054370629986146e1, 3.9659807692984756e1, 5.5295999999999992e2,
        3.1679999999999995e2, 6.7061129371774229e1, 1.6585010489793626e2,
        9.0135926574965367e1, 6.1178400000000001e3, 4.5360000000000002e2,
        3.2809477273287392e1, 8.6530489511966735e1, 5.4081555944979215e1,
        4.0352400000000002e3, 3.0240000000000003e2, 1.5863923077193906e1,
        3.6054370629986146e1, 3.9659807692984756e1, 5.5295999999999992e2,
        3.1679999999999995e2, 2.9312203322178738e2, 7.4632547204071318e2,
        2.6680234266189746e2, 1.9122119999999999e4, 1.2024000000000001e3,
        1.4421748251994458e2, 3.6054370629986147e2, 1.8027185314993073e2,
        1.0321200000000001e4, 6.0840000000000009e2, 3.7136001748885732e1,
        8.6530489511966735e1, 7.5714178322970909e1, 7.5491999999999996e2,
        3.8519999999999999e2, 2.9312203322178738e2, 7.4632547204071318e2,
        2.6680234266189746e2, 1.9122119999999999e4, 1.2024000000000001e3,
        1.4421748251994458e2, 3.6054370629986147e2, 1.8027185314993073e2,
        1.0321200000000001e4, 6.0840000000000009e2, 3.7136001748885732e1,
        8.6530489511966735e1, 7.5714178322970909e1, 7.5491999999999996e2,
        3.8519999999999999e2,
      ],
    },
  ])(
    "returns correct value when height is $height, weight is $weight, bsa_equation is $bsa_equation, age is $age, ci is $ci",
    ({ height, weight, bsa_equation, age, ci, expected }) => {
      const result = capacity(height, weight, bsa_equation, age, ci);

      expect(result).toHaveLength(expected.length);

      for (let i = 0; i < expected.length; i++) {
        expect(result[i]).toBeCloseTo(expected[i]);
      }
    },
  );
});
