import { expect, describe, it } from "@jest/globals";
import { set_tmp, set_tmp_array } from "../../src/models/set_tmp";
import { deep_close_to_array } from "../test_utilities";

describe("set_tmp", () => {
  it("should be a function", () => {
    expect(set_tmp).toBeInstanceOf(Function);
  });

  it.each([
    {
      tdb: 25,
      tr: 25,
      v: 0.1,
      rh: 50,
      met: 1.2,
      clo: 0.5,
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: undefined,
      units: undefined,
      limit_inputs: undefined,
      expected: 24.3,
    },
    {
      tdb: 77,
      tr: 77,
      v: 0.328,
      rh: 50,
      met: 1.2,
      clo: 0.5,
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: undefined,
      units: "IP",
      limit_inputs: undefined,
      expected: 75.8,
    },
    {
      tdb: 77,
      tr: 77,
      v: 0.328,
      rh: 50,
      met: 1.2,
      clo: 0.5,
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: undefined,
      units: "SI",
      limit_inputs: undefined,
      expected: 41.9,
    },
    {
      tdb: 77,
      tr: 77,
      v: 0.328,
      rh: 50,
      met: 1.2,
      clo: 0.5,
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: "sitting",
      units: "SI",
      limit_inputs: undefined,
      expected: 38.2,
    },
  ])(
    "returns $expected when tdb is $tdb, tr is $tr, v is $v, rh is $rh, met is $met, clo is $clo and units is $units",
    ({
      tdb,
      tr,
      v,
      rh,
      met,
      clo,
      wme,
      body_surface_area,
      p_atm,
      body_position,
      units,
      limit_inputs,
      kwargs,
      expected,
    }) => {
      const result = set_tmp(
        tdb,
        tr,
        v,
        rh,
        met,
        clo,
        wme,
        body_surface_area,
        p_atm,
        body_position,
        units,
        limit_inputs,
        kwargs,
      );
      expect(result).toBeCloseTo(expected, 1);
    },
  );
});

describe("set_tmp_array", () => {
  it("should be a function", () => {
    expect(set_tmp_array).toBeInstanceOf(Function);
  });

  it.each([
    {
      tdbArray: [25, 25],
      trArray: [25, 25],
      vArray: [0.1, 0.1],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: undefined,
      units: undefined,
      limit_inputs: undefined,
      expected: [24.3, 24.3],
    },
    {
      tdbArray: [25, 50],
      trArray: [25, 25],
      vArray: [0.1, 0.1],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: undefined,
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: undefined,
      units: undefined,
      limit_inputs: undefined,
      expected: [24.3, NaN],
    },
    {
      tdbArray: [30, 30],
      trArray: [25, 25],
      vArray: [0.5, 0.5],
      rhArray: [60, 60],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing", "sitting"],
      units: "SI",
      limit_inputs: undefined,
      expected: [26.3, 26.2],
    },
    {
      tdbArray: [77, 50],
      trArray: [77, 45],
      vArray: [0.328, 0.4],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing", "sitting"],
      units: "IP",
      limit_inputs: undefined,
      expected: [75.8, NaN],
    },
    {
      tdbArray: [77, 50],
      trArray: [77, 45],
      vArray: [0.328, 0.4],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing", "sitting"],
      units: "IP",
      limit_inputs: undefined,
      expected: [75.8, NaN],
    },
    {
      tdbArray: [77, 50],
      trArray: [77, 45],
      vArray: [0.328, 0.4],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing", "sitting"],
      units: "IP",
      limit_inputs: false,
      expected: [75.8, 45.6],
    },
    {
      tdbArray: [77, 50],
      trArray: [77, 45],
      vArray: [0.328, 0.4],
      rhArray: [50, 50],
      metArray: [1.2, 1.2],
      cloArray: [0.5, 0.5],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing"],
      units: "SI",
      limit_inputs: false,
      expected: [41.9, 48.4],
    },
    {
      tdbArray: [77, 50, 40],
      trArray: [77, 45, 40],
      vArray: [0.328, 0.4, 0.2],
      rhArray: [50, 50, 40],
      metArray: [1.2, 1.2, 1.5],
      cloArray: [0.5, 0.5, 0.2],
      wme: [0],
      body_surface_area: undefined,
      p_atm: undefined,
      body_position: ["standing"],
      units: "SI",
      limit_inputs: false,
      expected: [41.9, 48.4, 35.7],
    },
    {
      tdbArray: [77, 50, 40],
      trArray: [77, 45, 40],
      vArray: [0.328, 0.4, 0.2],
      rhArray: [50, 50, 40],
      metArray: [1.2, 1.2, 1.5],
      cloArray: [0.5, 0.5, 0.2],
      wme: [0, 0],
      body_surface_area: 1.8258,
      p_atm: 101325,
      body_position: undefined,
      units: "SI",
      limit_inputs: true,
      expected: [NaN, NaN, 35.7],
    },
    {
      tdbArray: [77, 50, 40, 30],
      trArray: [77, 45, 40, 25],
      vArray: [0.328, 0.4, 0.2, 0.5],
      rhArray: [50, 50, 40, 30],
      metArray: [1.2, 1.2, 1.5, 1.2],
      cloArray: [0.5, 0.5, 0.2, 0.4],
      wme: [0, 0, 0, 0],
      body_surface_area: 1.8258,
      p_atm: 101325,
      body_position: ["sitting"],
      units: undefined,
      limit_inputs: undefined,
      expected: [NaN, NaN, 35.6, 24],
    },
  ])(
    "returns $expected when tdb is $tdbArray, tr is $trArray, v is $vArray, rh is $rhArray, met is $metArray, clo is $cloArray and units is $units",
    ({
      tdbArray,
      trArray,
      vArray,
      rhArray,
      metArray,
      cloArray,
      wme,
      body_surface_area,
      p_atm,
      body_position,
      units,
      limit_inputs,
      kwargs,
      expected,
    }) => {
      const result = set_tmp_array(
        tdbArray,
        trArray,
        vArray,
        rhArray,
        metArray,
        cloArray,
        wme,
        body_surface_area,
        p_atm,
        body_position,
        units,
        limit_inputs,
        kwargs,
      );
      deep_close_to_array(result, expected, 1);
    },
  );
});
